# This is your home-manager configuration file
# Use this to configure your home environment (it replaces ~/.config/nixpkgs/home.nix)
{
  inputs,
  outputs,
  lib,
  config,
  pkgs,
  ...
}: {
  # You can import other home-manager modules here
  imports = [
    # If you want to use home-manager modules from other flakes (such as nix-colors):
    # inputs.nix-colors.homeManagerModule

    # You can also split up your configuration and import pieces of it here:
    # ./nvim.nix
    # inputs.stylix.homeManagerModules.stylix
    outputs.homeManagerModules.theme
    ../common/default.nix
  ];

  # nixpkgs = {
  #   overlays = [
  #     # Add overlays your own flake exports (from overlays and pkgs dir):
  #     outputs.overlays.additions
  #     outputs.overlays.modifications
  #     outputs.overlays.unstable-packages
  #
  #     # You can also add overlays exported from other flakes:
  #     # neovim-nightly-overlay.overlays.default
  #
  #     # Or define it inline, for example:
  #     # (final: prev: {
  #     #   hi = final.hello.overrideAttrs (oldAttrs: {
  #     #     patches = [ ./change-hello-to-hi.patch ];
  #     #   });
  #     # })
  #   ];
  # };

  nixpkgs = {
    # You can add overlays here
    # overlays = [
    #   # If you want to use overlays exported from other flakes:
    #   # neovim-nightly-overlay.overlays.default
    #
    #   # Or define it inline, for example:
    #   # (final: prev: {
    #   #   hi = final.hello.overrideAttrs (oldAttrs: {
    #   #     patches = [ ./change-hello-to-hi.patch ];
    #   #   });
    #   # })
    # ];
    # Configure your nixpkgs instance
    config = {
      # Disable if you don't want unfree packages
      # allowUnfree = true;
      # Workaround for https://github.com/nix-community/home-manager/issues/2942
      allowUnfreePredicate = _: true;
    };
  };

  home = {
    username = "joaquin";
    homeDirectory =
      if pkgs.stdenv.isLinux
      then "/home/${config.home.username}"
      else "/Users/${config.home.username}";
    sessionVariables = {
      # XDG_CACHE_HOME = "$HOME/.cache";
      # XDG_CONFIG_HOME = "$HOME/.config";
      # XDG_DATA_HOME = "$HOME/.local/share";
      # XDG_STATE_HOME = "$HOME/.local/state";

      # Not officially in the specification
      XDG_BIN_HOME = "$HOME/.local/bin";
    };
    sessionPath = [config.home.sessionVariables."XDG_BIN_HOME"];
    packages = with pkgs; [
      discord

      # TODO: bridge dep? Override so it gets added to PATH somehow
      xorg.libxcb.dev
      xwaylandvideobridge
    ];
  };
  xdg.systemDirs.data = [
    # show desktop entries
    "$HOME/.nix-profile/share"
  ];

  # Add stuff for your user as you see fit:
  programs.neovim = {
    enable = true;
    defaultEditor = true;
    vimAlias = true;
    extraLuaConfig = ''
      require("config.lazy")
    '';
    withNodeJs = true;
  };
  xdg.configFile."nvim" = {
    source = ../nvim;
    recursive = true;
  };
  #xdg.configFile."nvim/lazy-lock.json" = {
  #  enable = false;
  #  source = config.lib.file.mkOutOfStoreSymlink ../nvim/lazy-lock.json;

  #};

  # Enable home-manager and git
  programs.home-manager.enable = true;
  programs.git = {
    enable = true;
    userName = "Joaquín Triñanes";
    userEmail = "hi@joaquint.io";
    extraConfig = {init = {defaultBranch = "main";};};
  };

  programs.bash = {
    enable = true;
    initExtra = ''
      if [[ $(ps --no-header --pid=$PPID --format=comm) != "nu" && -z ''${BASH_EXECUTION_STRING} ]]; then
      	shopt -q login_shell && LOGIN_OPTION='--login' || LOGIN_OPTION='''
      	exec "${pkgs.nushell}/bin/nu" "$LOGIN_OPTION"
      fi
    '';
  };
  programs.nushell = {
    enable = true;
    shellAliases = config.home.shellAliases;
  };

  programs.rtx.enable = true;

  programs.zoxide = {
    enable = true;
    options = ["--cmd=j"];
  };

  programs.ripgrep.enable = true;
  programs.wezterm = {
    enable = true;
    extraConfig = ''
      local config = wezterm.config_builder()

      config.enable_wayland = true

      return config
    '';
  };
  programs.starship = {
    enable = true;
    settings = {
      nix_shell = {
        impure_msg = "";
        # format = "via [$symbol($state)($name)]($style) ";
      };
    };
  };

  programs.firefox = {enable = true;};

  programs.direnv.enable = true;
  programs.direnv.stdlib = ''
    ### Do not edit. This was autogenerated by 'rtx direnv' ###
    use_rtx() {
      direnv_load rtx direnv exec
    }
  '';
  # TODO: set to false when custom hook is added
  # programs.direnv.enableNushellInteraction = false;

  gtk = {
    enable = true;

    # iconTheme = {
    #   name = "Papirus-Dark";
    #   package = pkgs.papirus-icon-theme;
    # };

    # theme = {
    #   name = "palenight";
    #   package = pkgs.palenight-theme;
    # };
    #
    cursorTheme = {
      # name = "Numix-Cursor";
      name = "Bibata-Modern-Classic";
      package = pkgs.bibata-cursors; # numix-cursor-theme;
    };

    # gtk3.extraConfig = {
    #   Settings = ''
    #     gtk-application-prefer-dark-theme=1
    #   '';
    # };
    #
    # gtk4.extraConfig = {
    #   Settings = ''
    #     gtk-application-prefer-dark-theme=1
    #   '';
    # };
  };

  home.sessionVariables.XCURSOR_THEME = "Bibata-Modern-Classic";
  home.shellAliases = {
    g = "git";
    ll = "ls -l";
    la = "ls -la";
    hm = "home-manager";
  };

  services.gnome-keyring.enable = true;
  services.gpg-agent.enable = true;
  services.gpg-agent.enableSshSupport = true;

  # Nicely reload system units when changing configs
  systemd.user.startServices = "sd-switch";

  home.stateVersion = "23.05";
}
