# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, inputs, ... }:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
    inputs.hardware.nixosModules.common-cpu-amd
    inputs.hardware.nixosModules.common-pc-laptop-ssd
    # <nixos-hardware/common/gpu/nvidia/prime.nix>
    # <nixos-hardware/common/cpu/amd>
  ];

  boot.initrd.availableKernelModules =
    [ "nvme" "xhci_pci" "thunderbolt" "usbhid" "usb_storage" ];
  boot.initrd.kernelModules = [ "dm-snapshot" ];
  boot.kernelModules = [ "kvm-amd" ];
  boot.extraModulePackages = [ ];
  boot.kernelParams = [ "acpi_backlight=native" ];

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/2576-7F71";
    fsType = "vfat";
  };

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/a968eb65-3ad0-48a8-9d5e-dfd36857c0aa";
    fsType = "ext4";
  };

  fileSystems."/data" = {
    device = "/dev/disk/by-uuid/78E3BC451B7E5B2B";
    fsType = "ntfs";
  };

  swapDevices =
    [{ device = "/dev/disk/by-uuid/71bcbadf-0951-4686-9f17-6967fcd2dbeb"; }];

  services.switcherooControl.enable = true;

  environment.systemPackages = [
    (pkgs.writeShellScriptBin "prime-run" ''
      export __NV_PRIME_RENDER_OFFLOAD=1
      export __NV_PRIME_RENDER_OFFLOAD_PROVIDER=NVIDIA-G0
      export __GLX_VENDOR_LIBRARY_NAME=nvidia
      export __VK_LAYER_NV_optimus=NVIDIA_only
      exec "$@"
    '')
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.br-ab2907ad847f.useDHCP = lib.mkDefault true;
  # networking.interfaces.docker0.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp101s0f3u1.useDHCP = lib.mkDefault true;
  # networking.interfaces.veth0df21c5.useDHCP = lib.mkDefault true;
  # networking.interfaces.vethc314d8f.useDHCP = lib.mkDefault true;
  # networking.interfaces.vethc48591f.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlan0.useDHCP = lib.mkDefault true;

  services.tlp.enable = true;
  services.tlp.settings = { RUNTIME_PM_ON_AC = "auto"; };
  services.power-profiles-daemon.enable = false;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  powerManagement.cpuFreqGovernor = lib.mkDefault "powersave";
  hardware.cpu.amd.updateMicrocode =
    lib.mkDefault config.hardware.enableRedistributableFirmware;

  hardware.nvidia = {
    package = config.boot.kernelPackages.nvidiaPackages.stable;
    modesetting.enable = false;
    # modesetting.enable = true;
    powerManagement.enable = true;
    powerManagement.finegrained = true;
    nvidiaSettings = true;
    prime = {
      offload = {
        enable = true;
        enableOffloadCmd = true;
      };
      amdgpuBusId = "PCI:64:00:0";
      nvidiaBusId = "PCI:1:0:0";
    };
  };

  # sound.enable = false;
  security.rtkit.enable = true;
  hardware.pulseaudio.enable = false;
  services.pipewire = {
    enable = true;
    audio.enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    # jack.enable = true;
    pulse.enable = true;
    wireplumber.enable = true;
  };
  # sound
  # security.rtkit.enable = true;
  # hardware.pulseaudio.enable = false;
  # services.pipewire = {
  #   enable = true;
  #   wireplumber.enable = true;
  #   media-session.enable = false;
  #   jack.enable = true;
  #   alsa.enable = true;
  #   alsa.support32Bit = true;
  # };

}

